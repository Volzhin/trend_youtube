#!/usr/bin/env python3
"""
–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä—è–º—ã—Ö —Å—Å—ã–ª–æ–∫ –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ (–±–µ–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è)
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python get_direct_links.py "moto x3m" --max 5
"""

import requests
import argparse
import json

BASE_URL = "http://localhost:5002"

def get_direct_links(query, max_results=5):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä—è–º—ã—Ö —Å—Å—ã–ª–æ–∫ –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ"""
    print(f"üîç –ü–æ–∏—Å–∫: '{query}'")
    print(f"üìä –ú–∞–∫—Å–∏–º—É–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {max_results}")
    print("-" * 50)
    
    url = f"{BASE_URL}/api/search_direct_links"
    params = {
        "query": query,
        "max_results": max_results
    }
    
    try:
        response = requests.get(url, params=params, timeout=30)
        result = response.json()
        
        if result.get("status") != "success":
            print(f"‚ùå –û—à–∏–±–∫–∞: {result.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            return
        
        print(f"‚úÖ {result['message']}")
        print()
        
        if not result.get('links'):
            print("‚ùå –¢—Ä–µ–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        # –í—ã–≤–æ–¥–∏–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∏ —Å –ø—Ä—è–º—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏
        for i, track in enumerate(result['links'], 1):
            print(f"{i:2d}. {track['title']}")
            print(f"    –ö–∞–Ω–∞–ª: {track['channel_title']}")
            print(f"    –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {track['duration_sec']} —Å–µ–∫")
            
            if track.get('primary_genre'):
                print(f"    –ñ–∞–Ω—Ä: {track['primary_genre']} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {track['genre_confidence']:.2f})")
            
            print(f"    üé• YouTube: {track['youtube_url']}")
            print(f"    üîó –ü—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞: {track['direct_download_url']}")
            print()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ –≤ —Ñ–∞–π–ª
        save_direct_links_to_file(result['links'], query)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def get_single_direct_link(video_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç—Ä–µ–∫"""
    url = f"{BASE_URL}/api/direct_download/{video_id}"
    
    try:
        response = requests.get(url, timeout=30)
        result = response.json()
        
        if result.get("status") != "success":
            print(f"‚ùå –û—à–∏–±–∫–∞: {result.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            return
        
        track = result
        print(f"üéµ {track['title']}")
        print(f"   –ö–∞–Ω–∞–ª: {track['channel_title']}")
        print(f"   –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {track['duration_sec']} —Å–µ–∫")
        print(f"   –§–æ—Ä–º–∞—Ç: {track['format']}")
        print(f"   YouTube: {track['youtube_url']}")
        print(f"   üîó –ü—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞: {track['direct_download_url']}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –≤ —Ñ–∞–π–ª
        filename = f"direct_link_{video_id}.txt"
        with open(filename, 'w', encoding='utf-8') as f:
            f.write(f"–ü—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –∞—É–¥–∏–æ: {track['title']}\n")
            f.write("=" * 60 + "\n\n")
            f.write(f"Video ID: {video_id}\n")
            f.write(f"–ù–∞–∑–≤–∞–Ω–∏–µ: {track['title']}\n")
            f.write(f"–ö–∞–Ω–∞–ª: {track['channel_title']}\n")
            f.write(f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {track['duration_sec']} —Å–µ–∫\n")
            f.write(f"–§–æ—Ä–º–∞—Ç: {track['format']}\n")
            f.write(f"YouTube: {track['youtube_url']}\n")
            f.write(f"–ü—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞: {track['direct_download_url']}\n")
        
        print(f"üíæ –ü—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–∞–π–ª: {filename}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def save_direct_links_to_file(links, query):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä—è–º—ã—Ö —Å—Å—ã–ª–æ–∫ –≤ —Ñ–∞–π–ª"""
    filename = f"direct_links_{query.replace(' ', '_')}.txt"
    
    with open(filename, 'w', encoding='utf-8') as f:
        f.write(f"–ü—Ä—è–º—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∞—É–¥–∏–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {query}\n")
        f.write("=" * 60 + "\n\n")
        
        for i, track in enumerate(links, 1):
            f.write(f"{i}. {track['title']}\n")
            f.write(f"   –ö–∞–Ω–∞–ª: {track['channel_title']}\n")
            f.write(f"   –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {track['duration_sec']} —Å–µ–∫\n")
            f.write(f"   YouTube: {track['youtube_url']}\n")
            f.write(f"   –ü—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞: {track['direct_download_url']}\n")
            f.write("\n")
    
    print(f"üíæ –ü—Ä—è–º—ã–µ —Å—Å—ã–ª–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {filename}")

def download_with_direct_link(video_id, output_filename=None):
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ –ø–æ –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–µ"""
    if not output_filename:
        output_filename = f"{video_id}.mp3"
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É
    url = f"{BASE_URL}/api/direct_download/{video_id}"
    
    try:
        response = requests.get(url, timeout=30)
        result = response.json()
        
        if result.get("status") != "success":
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏: {result.get('message')}")
            return
        
        direct_url = result['direct_download_url']
        print(f"‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞–Ω–∏–µ {result['title']}...")
        
        # –°–∫–∞—á–∏–≤–∞–µ–º –ø–æ –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–µ
        audio_response = requests.get(direct_url, stream=True, timeout=60)
        
        if audio_response.status_code == 200:
            with open(output_filename, 'wb') as f:
                for chunk in audio_response.iter_content(chunk_size=8192):
                    f.write(chunk)
            print(f"‚úÖ –°–∫–∞—á–∞–Ω–æ: {output_filename}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {audio_response.status_code}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def main():
    parser = argparse.ArgumentParser(description="–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä—è–º—ã—Ö —Å—Å—ã–ª–æ–∫ –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ")
    parser.add_argument("query", nargs='?', help="–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å")
    parser.add_argument("-m", "--max", type=int, default=5, 
                       help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 5)")
    parser.add_argument("--track-id", help="–ü–æ–ª—É—á–∏—Ç—å –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞ –ø–æ video_id")
    parser.add_argument("--download", help="–°–∫–∞—á–∞—Ç—å –∞—É–¥–∏–æ –ø–æ video_id")
    parser.add_argument("--output", help="–ò–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è")
    
    args = parser.parse_args()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
    try:
        response = requests.get(f"{BASE_URL}/api/genres", timeout=5)
        if response.status_code != 200:
            print("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
    except:
        print("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python app.py")
        return
    
    if args.download:
        # –°–∫–∞—á–∏–≤–∞–µ–º –∞—É–¥–∏–æ –ø–æ –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–µ
        download_with_direct_link(args.download, args.output)
    elif args.track_id:
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞
        get_single_direct_link(args.track_id)
    elif args.query:
        # –ü–æ–∏—Å–∫ —Ç—Ä–µ–∫–æ–≤
        get_direct_links(args.query, args.max)
    else:
        print("‚ùå –£–∫–∞–∂–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–ª–∏ --track-id –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞")
        print("–ü—Ä–∏–º–µ—Ä—ã:")
        print("  python get_direct_links.py 'moto x3m' --max 3")
        print("  python get_direct_links.py --track-id Axwi1s7MIDo")
        print("  python get_direct_links.py --download Axwi1s7MIDo --output track.mp3")

if __name__ == "__main__":
    main()
