#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–æ–≤ —á–µ—Ä–µ–∑ API
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python quick_search.py "moto x3m" --download
"""

import requests
import argparse
import sys
import os
from urllib.parse import quote

BASE_URL = "http://localhost:5001"

def search_tracks(query, max_results=5, download=False):
    """–ü–æ–∏—Å–∫ —Ç—Ä–µ–∫–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É"""
    print(f"üîç –ü–æ–∏—Å–∫: '{query}'")
    print(f"üìä –ú–∞–∫—Å–∏–º—É–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {max_results}")
    print(f"‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞–Ω–∏–µ: {'–î–∞' if download else '–ù–µ—Ç'}")
    print("-" * 50)
    
    if download:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º API —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ–º
        url = f"{BASE_URL}/api/search_and_download_force"
        data = {
            "query": query,
            "max_results": max_results,
            "download": True
        }
        
        try:
            response = requests.post(url, json=data, timeout=60)
            result = response.json()
        except requests.exceptions.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return
    else:
        # –û–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫
        url = f"{BASE_URL}/api/search_and_download"
        params = {
            "query": query,
            "max_results": max_results
        }
        
        try:
            response = requests.get(url, params=params, timeout=30)
            result = response.json()
        except requests.exceptions.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return
    
    if result.get("status") != "success":
        print(f"‚ùå –û—à–∏–±–∫–∞: {result.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
        return
    
    print(f"‚úÖ {result['message']}")
    print()
    
    if not result.get('download_links'):
        print("‚ùå –¢—Ä–µ–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    # –í—ã–≤–æ–¥–∏–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∏
    for i, track in enumerate(result['download_links'], 1):
        print(f"{i:2d}. {track['title']}")
        print(f"    –ö–∞–Ω–∞–ª: {track['channel_title']}")
        print(f"    –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {track['duration_sec']} —Å–µ–∫")
        
        if track.get('primary_genre'):
            print(f"    –ñ–∞–Ω—Ä: {track['primary_genre']} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {track['genre_confidence']:.2f})")
        
        if track['is_downloaded']:
            print(f"    ‚úÖ –°–∫–∞—á–∞–Ω")
            if track['download_url']:
                print(f"    üì• –°—Å—ã–ª–∫–∞: {BASE_URL}{track['download_url']}")
        else:
            print(f"    ‚ùå –ù–µ —Å–∫–∞—á–∞–Ω")
        
        print(f"    üé• YouTube: {track['youtube_url']}")
        print()

def download_track(video_id, filename=None):
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞"""
    if not filename:
        filename = f"{video_id}.mp3"
    
    url = f"{BASE_URL}/download/{video_id}"
    
    try:
        print(f"‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞–Ω–∏–µ {video_id}...")
        response = requests.get(url, stream=True)
        
        if response.status_code == 200:
            with open(filename, 'wb') as f:
                for chunk in response.iter_content(chunk_size=8192):
                    f.write(chunk)
            print(f"‚úÖ –°–∫–∞—á–∞–Ω–æ: {filename}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {response.status_code}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def main():
    parser = argparse.ArgumentParser(description="–ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–æ–≤")
    parser.add_argument("query", help="–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å")
    parser.add_argument("-n", "--max-results", type=int, default=5, 
                       help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 5)")
    parser.add_argument("-d", "--download", action="store_true", 
                       help="–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–∫–∞—á–∞—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∏")
    parser.add_argument("--download-id", help="–°–∫–∞—á–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç—Ä–µ–∫ –ø–æ video_id")
    
    args = parser.parse_args()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
    try:
        response = requests.get(f"{BASE_URL}/api/genres", timeout=5)
        if response.status_code != 200:
            print("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            sys.exit(1)
    except:
        print("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python app.py")
        sys.exit(1)
    
    if args.download_id:
        # –°–∫–∞—á–∏–≤–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç—Ä–µ–∫
        download_track(args.download_id)
    else:
        # –ü–æ–∏—Å–∫ —Ç—Ä–µ–∫–æ–≤
        search_tracks(args.query, args.max_results, args.download)

if __name__ == "__main__":
    main()
